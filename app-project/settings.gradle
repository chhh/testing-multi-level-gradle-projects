/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 *
 * Detailed information about configuring a multi-project build in Gradle can be found
 * in the user manual at https://docs.gradle.org/5.6/userguide/multi_project_builds.html
 */

rootProject.name = 'app-project'

includeFlat('top-level-lib')

// Changing the build.gradle file of included projects:

// Use the default gradle build file name
//project(':top-level-lib').buildFileName = 'build.gradle'

// Use custom gradle build file name
project(':top-level-lib').buildFileName = 'top-level-lib.gradle'

// Assign custom build file name to all included projects, using their project name + '.gradle'
// as the build file name.
//rootProject.children.each {
//    it.buildFileName = it.name + '.gradle'
//}


// Including a project that is a library several sub-directories down the filesystem hierarchy.
// In this case the usual includeFlat() and include() don't work

// That includes an empty project, that we just happened to name the same way
// as the project in "big-multiproject-lib" that we're interested in.

//project(':lib-all').projectDir = new File('.\\wrapper-dir\\big-multiproject-lib\\lib-all')
//project(':lib-all').projectDir = new File('C:\\code2\\testing-multi-level-gradle-projects\\wrapper-dir\\big-multiproject-lib\\lib-all')

includeBuild('../wrapper-dir/big-multiproject-lib/lib-all')
